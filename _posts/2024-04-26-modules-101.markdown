---
layout: post
title:  "Valkey modules 101"
authors: 
  - dmitrypol
date: 2024-04-26 01:01:01 -0700
categories: update
---

## What are Valkey (or Redis) modules?  

Modules were first announced at RedisConf 2016 and officially introduced with Redis 4.0.  The idea of modules is to keep the core functionality lean and add extra features (such as new commands and data types) as needed.  Over the years there were a number of modules developed for Redis.  Valkey project plans to build on this foundation.  

Modules can be written in C or other languages that have C bindings.  In this article we will go through the process of building simple modules in C and Rust (using the Valkey Module Rust SDK).  This articles expects the audience to be at least somewhat familiar with C, Rust and Redis/Valkey.  

## Hello World module in C

If we clone [Valkey](https://github.com/valkey-io/valkey) repo we will find numerous examples in `src/modules`.  Let's create a new file `module1.c` in the same folder.  

```c
#include "../valkeymodule.h"

int hello(ValkeyModuleCtx *ctx, ValkeyModuleString **argv, int argc) {
    VALKEYMODULE_NOT_USED(argv);
    VALKEYMODULE_NOT_USED(argc);
    return ValkeyModule_ReplyWithSimpleString(ctx, "world1");
}

int ValkeyModule_OnLoad(ValkeyModuleCtx *ctx, ValkeyModuleString **argv, int argc) {
    VALKEYMODULE_NOT_USED(argv);
    VALKEYMODULE_NOT_USED(argc);
    if (ValkeyModule_Init(ctx,"module1",1,VALKEYMODULE_APIVER_1) 
        == VALKEYMODULE_ERR) return VALKEYMODULE_ERR;
    if (ValkeyModule_CreateCommand(ctx,"module1.hello", hello,"",0,0,0) 
        == VALKEYMODULE_ERR) return VALKEYMODULE_ERR;
    return VALKEYMODULE_OK;
}
```

All we are doing is initalizing `module1` and creating a command `hello` that returns `world1`.  Now we need to update `src/modules/Makefile`

```makefile
all: ... module1.so

module1.xo: ../valkeymodule.h

module1.so: module1.xo
	$(LD) -o $@ $^ $(SHOBJ_LDFLAGS) $(LIBS) -lc
```

Run `make` inside `src/modules` folder.  We will see numerous *.so and *.xo files created in `src/modules` including `module1.so`.  


## Hello World module in Rust

If we clone the [valkeymodule-rs](https://github.com/valkey-io/valkeymodule-rs) repo we will find `examples` folder with numerous .rs files.  Valkeymodule-rs is a recent fork of redismiodule-rs and there are still references to Redis in it.  We plan to update this repo and add it to [crates.io](https://crates.io/) but for now we will use it as is.  

Let's create `examples/module2.rs`

```rust
use redis_module::{redis_module, Context, RedisResult, RedisString, RedisValue};

fn hello(_ctx: &Context, _args: Vec<RedisString>) -> RedisResult {
    Ok(RedisValue::SimpleStringStatic("world2"))
}

redis_module! {
    name: "module2",
    version: 1,
    allocator: (redis_module::alloc::RedisAlloc, redis_module::alloc::RedisAlloc),
    data_types: [],
    commands: [
        ["module2.hello", hello, "", 0, 0, 0],
    ],
}
```

Rust syntax is a bit different than C but we are creating `module2` with command `hello` that returns `world2`.  Now we need to update `Cargo.toml` in the root folder.  Add this the bottom of the file:

```toml
[[example]]
name = "module2"
crate-type = ["cdylib"]
```

Run `cargo build --examples --no-default-features` in the root folder.  We will now see numerous files in `target/debug/examples` including `libmodule2.dylib`

## Run Valkey server with both modules

Go back into valkey repo folder and run make to compile the code.  Then add these lines to the bottom of `valkey.conf` file.

```bash
loadmodule path_to_valkey/src/modules/module1.so
loadmodule path_to_valkeymodule-rs/target/debug/examples/libmodule2.dylib
```

and run `src/valkey-server valkey.conf`.  You will see these messages in the log output.  

```
Module 'module1' loaded from path_to_valkey/src/modules/module1.so
Legacy Redis Module path_to_valkeymodule-rs/target/debug/examples/libmodule2.dylib found
Module 'module2' loaded from path_to_valkeymodule-rs/target/debug/examples/libmodule2.dylib
```

Do not worry about the message with `Legacy Redis Module`.  Valkey supports Redis modules once we update valkeymodule-rs SDK this message will go away.  Then use `src/valkey-cli` to connect.  

```bash
src/valkey-cli -3
127.0.0.1:6379> module list
1) 1# "name" => "module2"
   2# "ver" => (integer) 1
   3# "path" => "path_to_valkeymodule-rs/target/debug/examples/libmodule2.dylib"
   4# "args" => (empty array)
2) 1# "name" => "module1"
   2# "ver" => (integer) 1
   3# "path" => "path_to_valkey/src/modules/module1.so"
   4# "args" => (empty array)
127.0.0.1:6379> module1.hello
world1
127.0.0.1:6379> module2.hello
world2
```

We can now run both modules side by side and if we modify either C or RS file, recompile the code and restart `valkey-server` we will get the new functionality.  Please stay tuned for more articles in the future as we explore the possibilities of Valkey modules and where using C or Rust makes sense.  

## Usefull links

* [Valkey repo](https://github.com/valkey-io/valkey)
* [Valkey Rust SDK](https://github.com/valkey-io/valkeymodule-rs)
* [Extending Redis with Rust](https://www.youtube.com/watch?v=tAvLKsnNJVg)
* [Writing Redis Modules In Rust, RedisConf 2019](https://www.youtube.com/watch?v=c1E8jxWVfoI)
* [Rust Redis Modules](https://gsquire.github.io/static/post/rust-redis-modules/)
* [Redis Modules Getting Started](https://medium.com/@somesh557/redis-modules-getting-started-eace9e1e0465)
* [Redis modules API](https://redis.io/docs/latest/develop/reference/modules/)
* [Writing Redis Modules](https://redis.io/blog/writing-redis-modules/)
* [RedisModulesSDK](https://github.com/RedisLabsModules/RedisModulesSDK)
* [Rust in VS Code](https://code.visualstudio.com/docs/languages/rust)
